===========================
HashiCorp Vault Integration
===========================

The setup of HashiCorp Vault is well-documented by HashiCorp, but the integration 
process is not. The process described here is the setup for the integration 
between Vault and Jenkins.

There are three parts of the Vault integration. 
# Place secrets into a key-value secret engine, create the access policies, and put the
newly-created paths into the jenkins instance configuration file. See :ref:`Setting up the HashiCorp Vault key-value secrets`
# Create an approle inside of vault :ref:`Creating the Jenkins approle`
# Add both the role-id and secret-id to the Jenkins credential manager. See :ref:`Adding the approle credentials to Jenkins`

The order of these steps is important as we
need the access policies to create the approle. 


Setting up the HashiCorp Vault key-value secrets
------------------------------------------------

Place the secrets into vault and setup the policies using :ref:`the HashiCorp Vault<vault-secrets-organization>`
section of the :ref:`pipeline library integrations chapter<integrations>`.
The rest of this documentation assumes that the vault secrets and policies
are in place.

Creating the Jenkins approle
----------------------------

An approle is a HashiCorp Vault concept. It's a username and password for an
application. The actual values of the role-id and secret-id are guids
generated by Vault rather than strings provided by the user.

.. note::

   When creating an approle, there are two basic authentication patterns. One
   pattern, recommended by Jenkins, is to use the role_id and secret_id
   to get a token that will expire after some time or a number of uses. Another
   pattern is to use a re-newable token. This second pattern requires a recurring
   process to renew the token.

   When creating the approle, one can specify the token_period option. If the token_period is provided,
   the approle generates tokens that will expire after token_period. While the token has not yet expired, 
   it can be renewed to reset the lifetime to token_period. If no value for token_period is provided,
   the token will have a fixed lifetime and renewing the token will have no
   effect.

.. tip::

   Listing configured roles in vault

   * Vault WebUI Terminal: "`list /auth/approle/role`"
   * Vault Cli: "`> vault list /auth/approle/role`"

   Listing details of a vault token

   * Vault WebUI Terminal: "`write /auth/token/lookup token=${token}`"
   * Vault Cli: "`> vault token lookup ${token}`"

Creating an approle with a time-expiring token.

.. code-block:: none

   vault write auth/approle/role/${rolename} token_ttl=120h policies=${policy1},${policy2}
   vault read auth/approle/role/${rolename}/role-id
   vault write -force auth/approle/role/${rolename}/secret-id
   vault write auth/approle/login role_id=${role-id} secret_id=${secret-id}

The `token_ttl` can be omitted and the system will use a default for the
approle authentication engine. The token will die after 5 days or after the default
token_ttl defined in the approle engine configuration.

Once the role-id and secret-id are created, they should be entered under both
the .../approle/jenkins and .../applictions/jenkins paths in HashiCorp Vault.

Adding the approle credentials to Jenkins
-----------------------------------------

In the Jenkins credential manager, create two secret text credentials:
the approle role-id and the secret-id. The default configuration for
the pipeline library expects the credentials in Jenkins to have the following ids.
.. What is the Jenkins credential manager, place an example of the ids in here

* vault-jenkins-approle-role-id
* vault-jenkins-approle-secret-id

While these are the default expected id's, they can be set to anything
and the library configuration can be updated to match.
